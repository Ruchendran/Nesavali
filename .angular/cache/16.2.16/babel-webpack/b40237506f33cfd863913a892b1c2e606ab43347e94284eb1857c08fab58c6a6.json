{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class SeoService {\n  constructor(meta, title) {\n    this.meta = meta;\n    this.title = title;\n  }\n  updateMetaData(routeSnapshot, data) {\n    console.log(\"data\");\n    if (data) {\n      console.log(data);\n      const seoData = data;\n      // Update the title\n      this.title.setTitle(seoData.title || '');\n      // Update meta tags\n      if (seoData.metaTags) {\n        console.log(seoData);\n        seoData.metaTags.forEach(tag => {\n          this.meta.updateTag({\n            name: tag.name,\n            content: tag.content\n          });\n          this.meta.updateTag({\n            property: tag.property,\n            content: tag.content\n          });\n          // this.meta.updateTag({property:tag.o})\n        });\n      }\n    }\n  }\n\n  static {\n    this.ɵfac = function SeoService_Factory(t) {\n      return new (t || SeoService)(i0.ɵɵinject(i1.Meta), i0.ɵɵinject(i1.Title));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SeoService,\n      factory: SeoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["SeoService","constructor","meta","title","updateMetaData","routeSnapshot","data","console","log","seoData","setTitle","metaTags","forEach","tag","updateTag","name","content","property","i0","ɵɵinject","i1","Meta","Title","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chathruknan\\Desktop\\Nesav\\Nesavali\\src\\app\\seo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Meta, Title } from '@angular/platform-browser';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SeoService {\n  constructor(private meta: Meta, private title: Title) {}\n\n  updateMetaData(routeSnapshot: ActivatedRouteSnapshot,data:any): void {\n    console.log(\"data\")\n    if (data) {\n      console.log(data)\n      const seoData = data;\n\n      // Update the title\n      this.title.setTitle(seoData.title || '');\n\n      // Update meta tags\n      if (seoData.metaTags) {\n        console.log(seoData)\n        seoData.metaTags.forEach((tag: any) => {\n          this.meta.updateTag({ name: tag.name, content: tag.content });\n          this.meta.updateTag({ property: tag.property, content: tag.content });\n          // this.meta.updateTag({property:tag.o})\n        });\n      }\n    }\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,IAAU,EAAUC,KAAY;IAAhC,KAAAD,IAAI,GAAJA,IAAI;IAAgB,KAAAC,KAAK,GAALA,KAAK;EAAU;EAEvDC,cAAcA,CAACC,aAAqC,EAACC,IAAQ;IAC3DC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAIF,IAAI,EAAE;MACRC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,MAAMG,OAAO,GAAGH,IAAI;MAEpB;MACA,IAAI,CAACH,KAAK,CAACO,QAAQ,CAACD,OAAO,CAACN,KAAK,IAAI,EAAE,CAAC;MAExC;MACA,IAAIM,OAAO,CAACE,QAAQ,EAAE;QACpBJ,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;QACpBA,OAAO,CAACE,QAAQ,CAACC,OAAO,CAAEC,GAAQ,IAAI;UACpC,IAAI,CAACX,IAAI,CAACY,SAAS,CAAC;YAAEC,IAAI,EAAEF,GAAG,CAACE,IAAI;YAAEC,OAAO,EAAEH,GAAG,CAACG;UAAO,CAAE,CAAC;UAC7D,IAAI,CAACd,IAAI,CAACY,SAAS,CAAC;YAAEG,QAAQ,EAAEJ,GAAG,CAACI,QAAQ;YAAED,OAAO,EAAEH,GAAG,CAACG;UAAO,CAAE,CAAC;UACrE;QACF,CAAC,CAAC;;;EAGR;;;;uBAtBWhB,UAAU,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,IAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAE,KAAA;IAAA;EAAA;;;aAAVtB,UAAU;MAAAuB,OAAA,EAAVvB,UAAU,CAAAwB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}