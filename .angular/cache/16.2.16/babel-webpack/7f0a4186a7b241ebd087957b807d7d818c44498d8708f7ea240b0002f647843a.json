{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let LogInOrRegisterComponent = class LogInOrRegisterComponent {\n  constructor(share, api, route, cookie) {\n    this.share = share;\n    this.api = api;\n    this.route = route;\n    this.cookie = cookie;\n    this.existedUser = false;\n    this.passwordCorect = true;\n    this.userValid = true;\n    this.onLogin = () => {\n      console.log(this.loginForm);\n      this.api.login(this.loginForm.value).subscribe(response => {\n        let result = JSON.parse(JSON.stringify(response));\n        // console.log(result)\n        if (result.userStatus) {\n          this.userValid = true;\n          if (result.passwordStatus) {\n            this.passwordCorect = true;\n            this.cookie.set('user-auth', JSON.stringify(this.registerForm.value), 1);\n            this.route.navigate(['']);\n          } else {\n            // console.log('hit')\n            this.passwordCorect = false;\n          }\n        } else {\n          this.passwordCorect = false;\n          this.userValid = false;\n        }\n      });\n    };\n    this.onRegister = () => {\n      this.api.register(this.registerForm.value).subscribe(response => {\n        let result = JSON.parse(JSON.stringify(response));\n        if (result.statusCode === 200) {\n          this.existedUser = false;\n          this.route.navigate(['']);\n          this.cookie.set('user-auth', JSON.stringify(this.registerForm.value), 1);\n        } else {\n          console.log(\"hit\");\n          this.existedUser = true;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      mail: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n    this.loginForm = new FormGroup({\n      mail: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n  }\n};\nLogInOrRegisterComponent = __decorate([Component({\n  selector: 'app-log-in-or-register',\n  templateUrl: './log-in-or-register.component.html',\n  styleUrls: ['./log-in-or-register.component.scss']\n})], LogInOrRegisterComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","LogInOrRegisterComponent","constructor","share","api","route","cookie","existedUser","passwordCorect","userValid","onLogin","console","log","loginForm","login","value","subscribe","response","result","JSON","parse","stringify","userStatus","passwordStatus","set","registerForm","navigate","onRegister","register","statusCode","ngOnInit","name","required","mail","email","password","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Chathruknan\\Desktop\\Nesav\\Nesavali\\src\\app\\log-in-or-register\\log-in-or-register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ShareService } from '../share.service';\nimport  {ApiService} from \"../../app/services/api.service\";\nimport { FormGroup,FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-log-in-or-register',\n  templateUrl: './log-in-or-register.component.html',\n  styleUrls: ['./log-in-or-register.component.scss']\n})\nexport class LogInOrRegisterComponent implements OnInit {\n\n  constructor(public share:ShareService,private api:ApiService,private route:Router,private cookie:CookieService){\n\n  }\n\n  loginForm!:FormGroup;\n  registerForm!:FormGroup;\n  existedUser=false;\n  passwordCorect=true;\n  userValid=true;\n\n  ngOnInit(): void {\n   this.registerForm=new FormGroup({\n    name:new FormControl('',Validators.required),\n    mail:new FormControl('',[Validators.required,Validators.email]),\n    password:new FormControl('',Validators.required),\n\n   });\n\n\n   this.loginForm=new FormGroup({\n    mail:new FormControl('',[Validators.required,Validators.email]),\n    password:new FormControl('',Validators.required)\n   })\n  }\n\n  onLogin=()=>{\n   console.log(this.loginForm)\n   this.api.login(this.loginForm.value).subscribe((response)=>{\n    let result=JSON.parse(JSON.stringify(response));\n    // console.log(result)\n    if(result.userStatus){\n      this.userValid=true;\n      if(result.passwordStatus){\n        this.passwordCorect=true;\n        this.cookie.set('user-auth',JSON.stringify(this.registerForm.value),1);\n        this.route.navigate([''])\n      }else{\n        // console.log('hit')\n        this.passwordCorect=false;\n        \n      }\n    }\n    else{\n      this.passwordCorect=false;\n     this.userValid=false;\n    }\n\n   })\n  }\n\n  onRegister=()=>{\n  this.api.register(this.registerForm.value).subscribe((response)=>{\n       let result=JSON.parse(JSON.stringify(response));\n        if(result.statusCode===200){\n          this.existedUser=false;\n          this.route.navigate(['']);\n          this.cookie.set('user-auth',JSON.stringify(this.registerForm.value),1);\n        }\n        else{\n          console.log(\"hit\")\n          this.existedUser=true;\n        }\n   })\n  \n  }\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}